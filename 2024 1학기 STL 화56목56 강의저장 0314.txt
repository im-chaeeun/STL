

==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:38:07
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    std::array<int, 100> a;      // stack에 만들어짐
    
    for (int num : a)
        std::cout << num << std::endl;

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:39:29
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    std::array<int, 100> a;      // stack에 만들어짐
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    for (int num : a)
        std::cout << num << std::endl;

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:39:36
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    std::array<int, 100> a{};      // stack에 만들어짐
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    for (int num : a)
        std::cout << num << std::endl;

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:39:42
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    std::array<int, 100> a{1};      // stack에 만들어짐
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    for (int num : a)
        std::cout << num << std::endl;

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:40:35
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

std::array<int, 100> a;

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    for (int num : a)
        std::cout << num << std::endl;

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:41:57
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

std::array<int, 100> a;     // data 세그먼트에 기록됨 - default로 초기화 되는 영역에 있기 때문에 ???

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    for (int num : a)
        std::cout << num << std::endl;

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:46:04
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <print>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    std::array<int, 100> a;
    
    for (int i = 0; i < 100; i++)
        a[i] = i + 1;

    for (int num : a)
        std::print("{:8}", num);

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:48:02
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <print>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    std::array<int, 100> a;
  
    // 이 코드의 문제점 
    //for (int i = 0; i < 100; i++)
    //    a[i] = i + 1;

    // 이렇게 쓴 거면 C++ 잘 배웠다
    int i{};
    for (int& num : a)
        num = ++i;

    for (int num : a)
        std::print("{:8}", num);

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 1:57:32
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <print>
#include <numeric>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    std::array<int, 100> a;
  
    // 이 코드의 문제점 
    //for (int i = 0; i < 100; i++)
    //    a[i] = i + 1;

    // 이렇게 쓴 거면 C++ 잘 배웠다
    // STL에선 바보 코딩 - 내가 생각하는 모든 일들이 라이브러리로 제공됨!
    // 어떤 알고리즘을 제공하는 지 한 번 훑어보자!!
    
    // 이 코드를 한 줄로 바꿔보자
    //int i{};
    //for (int& num : a)
    //    num = ++i;

    // iota 함수 - 자료형에 무관함 
    iota(a.begin(), a.end(), 1);

    for (int num : a)
        std::print("{:8}", num);

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:02:51
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <print>
#include <numeric>
#include <fstream>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    std::array<int, 100> a;
  
    // 이 코드의 문제점 
    //for (int i = 0; i < 100; i++)
    //    a[i] = i + 1;

    // 이렇게 쓴 거면 C++ 잘 배웠다
    // STL에선 바보 코딩 - 내가 생각하는 모든 일들이 라이브러리로 제공됨!
    // 어떤 알고리즘을 제공하는 지 한 번 훑어보자!!
    // 혹시 있을까 싶으면 거의 다 존재하는 코드일 것!
    
    // 이 코드를 한 줄로 바꿔보자
    //int i{};
    //for (int& num : a)
    //    num = ++i;

    // iota 함수 - 자료형에 무관함 
    iota(a.begin(), a.end(), 1);

    std::ofstream out{ "int값들.txt" };

    for (int num : a)
        std::print(out, "{:8}", num);


    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:05:08
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <print>
#include <numeric>
#include <fstream>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    std::array<int, 100> a;     // 400 바이트 
  
    // 이 코드의 문제점 
    //for (int i = 0; i < 100; i++)
    //    a[i] = i + 1;

    // 이렇게 쓴 거면 C++ 잘 배웠다
    // STL에선 바보 코딩 - 내가 생각하는 모든 일들이 라이브러리로 제공됨!
    // 어떤 알고리즘을 제공하는 지 한 번 훑어보자!!
    // 혹시 있을까 싶으면 거의 다 존재하는 코드일 것!
    
    // 이 코드를 한 줄로 바꿔보자
    //int i{};
    //for (int& num : a)
    //    num = ++i;

    // iota 함수 - 자료형에 무관함 
    iota(a.begin(), a.end(), 1);

    std::ofstream out{ "int값들.txt" };

    for (int num : a)
        std::print(out, "{} ", num);

    // int 100개를 저장하기 위해 필요한 공간은?


    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:21:08
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <print>
#include <numeric>
#include <fstream>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    std::array<int, 100> a;     // 400 바이트 
  
    // 이 코드의 문제점 
    //for (int i = 0; i < 100; i++)
    //    a[i] = i + 1;

    // 이렇게 쓴 거면 C++ 잘 배웠다
    // STL에선 바보 코딩 - 내가 생각하는 모든 일들이 라이브러리로 제공됨!
    // 어떤 알고리즘을 제공하는 지 한 번 훑어보자!!
    // 혹시 있을까 싶으면 거의 다 존재하는 코드일 것!
    
    // 이 코드를 한 줄로 바꿔보자
    //int i{};
    //for (int& num : a)
    //    num = ++i;

    // iota 함수 - 자료형에 무관함 
    iota(a.begin(), a.end(), 1);

    std::ofstream out{ "int값들.txt" };

    for (int num : a)
        std::print(out, "{} ", num);
    // "{:8}"로 했을 때는 800바이트 넘게 사용, "{} "로 했을 때는 292바이트 사용 
    //  자릿수를 바꾸면 평균 몇... ? 뭔 질문인지 기억이 안 나...


    // int 100개를 저장하기 위해 필요한 공간은?


    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:26:02
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <print>
#include <numeric>
#include <fstream>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    // 0으로 초기화 하고 싶으면 std::array<int, 100> a{}; 이렇게 쓰면 됨 - 0으로 초기화 되는 게 아니라 default로 초기화 되는 것
    
    std::array<int, 100> a;     // 400 바이트 
  
    // 이 코드의 문제점 
    //for (int i = 0; i < 100; i++)
    //    a[i] = i + 1;

    // 이렇게 쓴 거면 C++ 잘 배웠다
    // STL에선 바보 코딩 - 내가 생각하는 모든 일들이 라이브러리로 제공됨!
    // 어떤 알고리즘을 제공하는 지 한 번 훑어보자!!
    // 혹시 있을까 싶으면 거의 다 존재하는 코드일 것!
    
    // 이 코드를 한 줄로 바꿔보자
    //int i{};
    //for (int& num : a)
    //    num = ++i;

    // iota 함수 - 자료형에 무관함 
    iota(a.begin(), a.end(), 1);

    std::ofstream out{ "int값들.txt" };
    
    out.write((char*)a.data(), a.size() * sizeof(int));       // write 함수는 가장 밑바닥(가장 기계어와 가까운) 함수

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:36:42
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <print>
#include <numeric>
#include <fstream>

// [문제] int 100개를 저장할 공간을 확보하라
// int 값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들.txt"에 기록하라.

// 100개라는 숫자를 알기 때문에 array를 사용한다

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<int, 100> a;     // 400 바이트 
  
    iota(a.begin(), a.end(), 1);

    std::ofstream out{ "int값들.txt", std::ios::binary };
    
    out.write((char*)a.data(), a.size() * sizeof(int));       // write 함수는 가장 밑바닥(가장 기계어와 가까운) 함수
    // 저수준 출력 DMA 써도 아무 문제 없다
    // 텍스트 모드와 바이너리 모드가 무엇인가? - 검색해보기, OS에 따라 방법이 다르다
    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:47:20
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <array>
#include <fstream>
#include <random>

std::default_random_engine dre;     
std::uniform_int_distribution uid;


//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<int, 1000> a;     // 400 바이트 
  
    for (int& num : a)
        num = uid(dre);

    std::ofstream out{ "int값들.txt", std::ios::binary };
    
    out.write((char*)a.data(), a.size() * sizeof(int));       // write 함수는 가장 밑바닥(가장 기계어와 가까운) 함수
    // 저수준 출력 DMA 써도 아무 문제 없다
    // 텍스트 모드와 바이너리 모드가 무엇인가? - 검색해보기, OS에 따라 방법이 다르다
    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:48:07
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <array>
#include <fstream>
#include <random>

std::default_random_engine dre;     
std::uniform_int_distribution uid;

// [문제] int값 1000개를 "int값들"에 저장하였다.
//  파일은 binary 모드로 열었고
// 값은 메모리 크기 그대로 4'000 바이트를 기록하였다.
// int 값 중 제일 큰 값을 찾아 화면에 출력하라.
// 
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<int, 1000> a;     // 400 바이트 
  
    for (int& num : a)
        num = uid(dre);

    std::ofstream out{ "int값들.txt", std::ios::binary };
    
    out.write((char*)a.data(), a.size() * sizeof(int));       // write 함수는 가장 밑바닥(가장 기계어와 가까운) 함수
    // 저수준 출력 DMA 써도 아무 문제 없다
    // 텍스트 모드와 바이너리 모드가 무엇인가? - 검색해보기, OS에 따라 방법이 다르다
    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:48:36
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <array>
#include <fstream>
#include <random>

std::default_random_engine dre;     
std::uniform_int_distribution uid;

// [문제] int값 1000개를 "int값들"에 저장하였다.
//  파일은 binary 모드로 열었고
// 값은 메모리 크기 그대로 4'000 바이트를 기록하였다.
// int 값 중 제일 큰 값을 찾아 화면에 출력하라.
// 
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<int, 1000> a;     // 400 바이트 
  
    for (int& num : a)
        num = uid(dre);

    std::ofstream out{ "int값들.txt", std::ios::binary };
    
    out.write((char*)a.data(), a.size() * sizeof(int));       // write 함수는 가장 밑바닥(가장 기계어와 가까운) 함수
    // 저수준 출력 DMA 써도 아무 문제 없다
    // 텍스트 모드와 바이너리 모드가 무엇인가? - 검색해보기, OS에 따라 방법이 다르다
    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:49:33
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <array>
#include <fstream>
#include <random>

std::default_random_engine dre;     
std::uniform_int_distribution uid;

// [문제] int값 1000개를 "int값들"에 저장하였다.
//  파일은 binary 모드로 열었고
// 값은 메모리 크기 그대로 4'000 바이트를 기록하였다.
// int 값 중 제일 큰 값을 찾아 화면에 출력하라.
// 
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<int, 1000> a;     // 400 바이트 
  
    for (int& num : a)
        num = uid(dre);

    std::ofstream out{ "int값들", std::ios::binary };
    
    out.write((char*)a.data(), a.size() * sizeof(int));       // write 함수는 가장 밑바닥(가장 기계어와 가까운) 함수
    // 저수준 출력 DMA 써도 아무 문제 없다
    // 텍스트 모드와 바이너리 모드가 무엇인가? - 검색해보기, OS에 따라 방법이 다르다
    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:52:03
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <array>
#include <fstream>
#include <random>
#include <print>
std::default_random_engine dre;     
std::uniform_int_distribution uid;

// [문제] int값 1000개를 "int값들"에 저장하였다.
//  파일은 binary 모드로 열었고
// 값은 메모리 크기 그대로 4'000 바이트를 기록하였다.
// int 값 중 제일 큰 값을 찾아 화면에 출력하라.
// 
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<int, 1000> a;     // 400 바이트 
  
    for (int& num : a)
        num = uid(dre);

    std::ofstream out{ "int값들", std::ios::binary };
    
    for (int num : a)
        std::print(out, "{}", num);

    // 저수준 출력 DMA 써도 아무 문제 없다
    // 텍스트 모드와 바이너리 모드가 무엇인가? - 검색해보기, OS에 따라 방법이 다르다
    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:52:28
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <array>
#include <fstream>
#include <random>
#include <print>
std::default_random_engine dre;     
std::uniform_int_distribution uid;

// [문제] int값 1000개를 "int값들"에 저장하였다.
//  파일은 binary 모드로 열었고
// 값은 메모리 크기 그대로 4'000 바이트를 기록하였다.
// int 값 중 제일 큰 값을 찾아 화면에 출력하라.
// 
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<int, 1000> a;     // 400 바이트 
  
    for (int& num : a)
        num = uid(dre);

    std::ofstream out{ "int값들", std::ios::binary };
    
    for (int num : a)
        std::print(out, "{} ", num);

    // 저수준 출력 DMA 써도 아무 문제 없다
    // 텍스트 모드와 바이너리 모드가 무엇인가? - 검색해보기, OS에 따라 방법이 다르다
    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-14 목요일 오후 2:54:53
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <array>
#include <fstream>
#include <random>
#include <print>
std::default_random_engine dre;     
std::uniform_int_distribution uid;

// [문제] int값 1000개를 "int값들"에 저장하였다.
//  파일은 binary 모드로 열었고
// 값은 메모리 크기 그대로 4'000 바이트를 기록하였다.
// int 값 중 제일 큰 값을 찾아 화면에 출력하라.
// 
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<int, 1000> a;     // 400 바이트 
  
    for (int& num : a)
        num = uid(dre);

    std::ofstream out{ "int값들", std::ios::binary };
    
    for (int num : a)
        std::print(out, "{} ", num);

    std::ifstream in{ "int값들" };
    if (not in)
        exit(0);

    std::cout << *std::max_element(std::istream_iterator<int>(), {}) << std::endl;

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-15 금요일 오전 12:04:12
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 14일 목요일    (2주 2)        
// 
// FILE I/O text/binary - high/low level                            
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <array>
#include <fstream>
#include <random>
#include <print>
#include <algorithm>

// [문제] "개들"에는 class Dog 객체 100개가 기록되어 있다.
// 파일은 binary 모드이고 write 함수로 sizeof(Dog)*100 바이트를 기록하였다.
// 파일을 읽어 가장 num값이 큰 Dog 정보를 화면에 출력하라. 
// class Dog의 멤버는 다음과 같다.

//class Dog {
//    char c;
//    int num;
//};

std::default_random_engine dre;     
std::uniform_int_distribution<int> uidC{ 'a', 'z' };
std::uniform_int_distribution uidNum{ -9999, 9999 };

class Dog {
    char c{ static_cast<char>(uidC(dre)) };
    int num{ uidNum(dre) };
public:
    friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
        return os << "글자: " << dog.c << "숫자: " << dog.num;
    }
};
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{   
    std::array<Dog, 100> dogs;
   
    for (const Dog& dog : dogs)
        std::cout << dog << std::endl;

    //
    std::ofstream out{ "개들", std::ios::binary };
    out.write((char*)dogs.data(), sizeof(Dog) * dogs.size());

    save("STL.cpp");
}
