



===================================
저장한 시간 :
===================================




===================================
저장한 시간 :2024-03-07 목요일 오후 1:50:35
===================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 5일 화요일   
//                                            (1주 1)
// Visual studio 17.9 이상
// Release x64 환경에서 사용, 디버그 도움 받지 않는 게 좋음
// 프로젝트 설정 - 속성 - c++언어 표준 미리보기 초안의 기능 std:c++latest
//
// 한 학기 강의를 저장할 save 함수 작성하고 파일 분리
//---------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
// using namespace -- 이거 쓰지 않고 하기

// 이렇게 하지 말고
//void save(const char[8]);
//void save(const *); // 베열은 언제나 포인터로 자동 변환된다. collapsing됨
//void save(string); // 복사 생성
// 이렇게 하기
//void save(const string&); // & 원본 , const 바뀌지 않을 거니까
// 그런데 save를 string만 할 수 있는 건가? 모든 자료형을 쓸 수는 없는 건가??
void save(std::string_view); // const 붙일 필요가 없음, string_view에 대한 내용 공부하기!!! 엉터리 블로그 글 조심하기

int main()
{
    // std::cout << "2024 STL"<<'\n';  // std 안 쓰고 '\n'이거 써도 됨
    std::cout << "2024 STL" << std::endl;
    // 실행창 속성 - 레이아웃 80 25

    save("STL.cpp");
    // "" 안 마우스 갖다 대면 글자수 나옴


}

void save(std::string_view fileName)
{
    // file을 읽기용으로 연다 
    std::ifstream in{ fileName.data() }; // 앞은 자료형, 뒤에는 엑세스 하기 위한 이름 // RALL
    if (!in) { // 인풋 파일이 잘못 되었으면
        std::cout << fileName << "열기 실패" << std::endl;
        exit(0);
    }

    //std::cout << sizeof in << std::endl; // sizeof는 괄호 생략할 수 있다.
    //std::cout << adressof(in) << std::endl;   
    //std::cout << typeid(in).name() << std::endl; // ifstream은 클래스임 

    // 저장할 파일을 덧붙여 쓰기 모드로 연다.
    std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app }; // app는 append

    //std::cout << sizeof out << std::endl;

    // 읽을 파일의 내용을 읽어 쓸 파일에 덧 붙인다.
    // STL 자료 구조와 알고리즘을 이용하여 기록한다(좋은 건 아니다).
    std::vector<char> v{ std::istreambuf_iterator<char>{ in}, {} };
    //

    // 현재 time_point를 얻는다
    auto now = std::chrono::system_clock::now();    // epoch으로부터 흐른 tick
    // std::cout << now << std::endl; 그리니치 천문대
                         
    // UTC 시간 형식으로 변환
    auto utc = std::chrono::system_clock::to_time_t(now);

    // 현지 시간으로 변환
    auto It = localtime(&utc);     // localtime은 C함수

    // 한국 형식으로 출력한다(출력 스트림의 지역을 반환)
    auto old = out.imbue(std::locale("ko_KR"));

    out << std::endl << std::endl;
    out << "===================================" << std::endl;
    out << "저장한 시간 :" << std::put_time(It, "%x %A %X") << std::endl;
    out << "===================================" << std::endl;
    out << std::endl << std::endl;
    
    out.imbue(old);

    std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
    // v에 글자가 있어
    //for (char c : v)
    //    std::cout << c;
}

==========================================================================
fileName ::, 2024-03-07 목요일 오후 1:53:49
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 5일 화요일   
//                                            (1주 1)
// Visual studio 17.9 이상
// Release x64 환경에서 사용, 디버그 도움 받지 않는 게 좋음
// 프로젝트 설정 - 속성 - c++언어 표준 미리보기 초안의 기능 std:c++latest
//
// 한 학기 강의를 저장할 save 함수 작성하고 파일 분리
//---------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
// using namespace -- 이거 쓰지 않고 하기

// 이렇게 하지 말고
//void save(const char[8]);
//void save(const *); // 베열은 언제나 포인터로 자동 변환된다. collapsing됨
//void save(string); // 복사 생성
// 이렇게 하기
//void save(const string&); // & 원본 , const 바뀌지 않을 거니까
// 그런데 save를 string만 할 수 있는 건가? 모든 자료형을 쓸 수는 없는 건가??
void save(std::string_view); // const 붙일 필요가 없음, string_view에 대한 내용 공부하기!!! 엉터리 블로그 글 조심하기

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------

{
    std::cout << "2024 STL" << std::endl;

    save("STL.cpp");
    // "" 안 마우스 갖다 대면 글자수 나옴


}

void save(std::string_view fileName)
{
    // file을 읽기용으로 연다 
    std::ifstream in{ fileName.data() }; // 앞은 자료형, 뒤에는 엑세스 하기 위한 이름 // RALL
    if (!in) { // 인풋 파일이 잘못 되었으면
        std::cout << fileName << "열기 실패" << std::endl;
        exit(0);
    }

    //std::cout << sizeof in << std::endl; // sizeof는 괄호 생략할 수 있다.
    //std::cout << adressof(in) << std::endl;   
    //std::cout << typeid(in).name() << std::endl; // ifstream은 클래스임 

    // 저장할 파일을 덧붙여 쓰기 모드로 연다.
    std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app }; // app는 append

    //std::cout << sizeof out << std::endl;

    // 읽을 파일의 내용을 읽어 쓸 파일에 덧 붙인다.
    // STL 자료 구조와 알고리즘을 이용하여 기록한다(좋은 건 아니다).
    std::vector<char> v{ std::istreambuf_iterator<char>{ in}, {} };

    auto now = std::chrono::system_clock::now();    
    auto utc = std::chrono::system_clock::to_time_t(now);
    auto It = localtime(&utc);     // localtime은 C함수

    // 한국 형식으로 출력한다(출력 스트림의 지역을 반환)
    auto old = out.imbue(std::locale("ko_KR"));

    out << std::endl << std::endl;
    out << "==========================================================================" << std::endl;
    out << "fileName :" << std::put_time(It, ":, %x %A %X") << std::endl;
    out << "==========================================================================" << std::endl;
    out << std::endl << std::endl;
    
    out.imbue(old);

    std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });

}

==========================================================================
fileName ::, 2024-03-07 목요일 오후 2:07:52
==========================================================================


//-----------------------------------------------------------------------------------------------
// save.h			한 학기 강의를 저장한다
// 
// 2024.03.07
//-----------------------------------------------------------------------------------------------

#pragma once

void save(std::string_view fileName);


==========================================================================
fileName ::, 2024-03-07 목요일 오후 2:08:44
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 5일 화요일   
//                                            (1주 1)
// Visual studio 17.9 이상
// Release x64 환경에서 사용, 디버그 도움 받지 않는 게 좋음
// 프로젝트 설정 - 속성 - C++언어 표준 미리보기 초안의 기능 std:c++latest
//                      - C++언어 SDL검사 - no
//
// 한 학기 강의를 저장할 save 함수 작성하고 파일 분리
//---------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------

{
    std::cout << "save 기능을 완성했다" << std::endl;

    save("STL.cpp");

}


==========================================================================
fileName ::, 2024-03-07 목요일 오후 2:36:10
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 5일 화요일    (1주 2)                                           
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>

// [문제] main()을 손대지 말고 의도대로 실행되도록 change()를 선언하고 정의하라.

void change(int&, int&);    // int reference

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------

{
    int a{ 1 }, b{ 2 };

    change(a, b);

    std::cout << a << ", " << b << std::endl;
    
    save("STL.cpp");
}

void change(int& a, int& b)
{
    int temp{ a };

    temp = a;
    a = b;
    b = temp;
}



==========================================================================
fileName ::, 2024-03-07 목요일 오후 2:37:13
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 5일 화요일    (1주 2)                                           
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>

// [문제] main()을 손대지 말고 의도대로 실행되도록 change()를 선언하고 정의하라.

void change(int&, int&);    // int reference

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------

{
    int a{ 1 }, b{ 2 };

    change(a, b);

    std::cout << a << ", " << b << std::endl;
    
    save("STL.cpp");
}

void change(int& a, int& b)
{
    int temp{};

    temp = a;
    a = b;
    b = temp;
}



==========================================================================
fileName ::, 2024-03-07 목요일 오후 2:58:15
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 5일 화요일    (1주 2)                                           
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>

#define Dog int

// [문제] main()을 손대지 말고 의도대로 실행되도록 change()를 선언하고 정의하라.

void change(int&, int&);    // int reference

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------

{
    Dog a{ 1 }, b{ 2 };

    change(a, b);

    std::cout << a << ", " << b << std::endl;
    
    save("STL.cpp");
}

void change(int &a, int &b)
{
    int temp{ a };

    temp = a;
    a = b;
    b = temp;
}



==========================================================================
fileName ::, 2024-03-07 목요일 오후 2:59:08
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 5일 화요일    (1주 2)                                           
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>

using Dog = int;

// [문제] main()을 손대지 말고 의도대로 실행되도록 change()를 선언하고 정의하라.

void change(int&, int&);    // int reference

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------

{
    Dog a{ 1 }, b{ 2 };

    change(a, b);

    std::cout << a << ", " << b << std::endl;
    
    save("STL.cpp");
}

void change(int &a, int &b)
{
    int temp{ a };

    temp = a;
    a = b;
    b = temp;
}



==========================================================================
fileName ::, 2024-03-07 목요일 오후 3:24:06
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 5일 화요일    (1주 2)                                           
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>


// [문제] main()을 손대지 말고 의도대로 실행되도록 change()를 선언하고 정의하라.

class Dog;
void change(int&, int&);    // int reference
void change(Dog&, Dog&);    // int reference

class Dog {
    int num;

public:
    Dog(int num) : num{ num } {}
    // Dog(const Dog&) {};  - special function (컴파일러가 자동 생성)

    //operator int() { return num; }
    friend std::ostream& operator<<(std::ostream& os, const Dog& dog){
        return os << dog.num;
    };
};



//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------

{
    Dog a{ 1 }, b{ 2 };

    change(a, b);

    std::cout << a << ", " << b << std::endl;
    
    save("STL.cpp");
}

void change(int &a, int &b)
{
    int temp{ a };

    temp = a;
    a = b;
    b = temp;
}

void change(Dog& a, Dog& b)
{
    Dog temp{ a };      // copy-construction 복사 생성이 되었음(a를 복사함)

    temp = a;
    a = b;
    b = temp;
}



==========================================================================
fileName ::, 2024-03-12 화요일 오후 2:07:23
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 12일 화요일    (2주 1)        
// 많은 수의 데이터를 처리할 수 있어야                                   
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <random>
#include <format>       

std::default_random_engine dre;      //
std::uniform_int_distribution<int> uid{ 0, 9'9999 };
// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.
 
// 이렇게 코딩하지 말 것!!!!!!!!!!!
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    int a[100];     // 앞으로 사용하지 않을 것 - T[N}은 사용하지 않는다(쓰지마라!!).

    for (int i = 0; i < 100; i++)
        a[i] = uid(dre);


    for (int i = 0; i < 100; i++)
        std::cout << std::format("{:8}", a[i]) << std::endl;
    std::cout << std::endl;

    save("STL.cpp");
}






==========================================================================
fileName ::, 2024-03-12 화요일 오후 2:21:07
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 12일 화요일    (2주 1)        
// 많은 수의 데이터를 처리할 수 있어야                                   
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <random>
#include <format>       

std::default_random_engine dre;      //
std::uniform_int_distribution<int> uid{ 0, 9'9999 };
// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.
 

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    int a[100];     // 앞으로 사용하지 않을 것 - T[N}은 사용하지 않는다(쓰지마라!!).

    // 특정 숫자에 종속되지 않게 코딩하기
    for (int& num : a)
        num = uid(dre);


    //for (int num : a)
    //    print(std::cout, "{:8}", num);
    //std::cout << std::endl;

    // [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.
    int max = 0;
    for (int i = 0; i < 100; i++)
    {
        if (max < a[i])
            max = a[i];
        else
            continue;
  
    }
    std::cout << max << std:: endl;

    save("STL.cpp");
}



==========================================================================
fileName ::, 2024-03-12 화요일 오후 2:26:10
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 12일 화요일    (2주 1)        
// 많은 수의 데이터를 처리할 수 있어야                                   
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <random>
#include <format>       

std::default_random_engine dre;      //
std::uniform_int_distribution<int> uid{ 0, 9'9999 };
// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    int a[100];     // 앞으로 사용하지 않을 것 - T[N}은 사용하지 않는다(쓰지마라!!).

    // 특정 숫자에 종속되지 않게 코딩하기
    for (int& num : a)
        num = uid(dre);


    //for (int num : a)
    //    print(std::cout, "{:8}", num);
    //std::cout << std::endl;

    // [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.
    // STL 배우기 전까진 이렇게 쓰면 잘한 것이지만, 이젠 이렇게 하면 안 됨
    int maxValue = std::numeric_limits<int>::min();
    for (int num : a)
    {
        if (num > maxValue)
        {
            maxValue = num;
        }
    }
    std::cout << maxValue << std:: endl;

    save("STL.cpp");
}


==========================================================================
fileName ::, 2024-03-12 화요일 오후 2:35:33
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 12일 화요일    (2주 1)        
// 많은 수의 데이터를 처리할 수 있어야                                   
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <random>
#include <format>       
#include <algorithm>

std::default_random_engine dre;      //
std::uniform_int_distribution<int> uid{ 0, 9'9999 };
// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    int a[100];     // 앞으로 사용하지 않을 것 - T[N}은 사용하지 않는다(쓰지마라!!).

    // 특정 숫자에 종속되지 않게 코딩하기
    for (int& num : a)
        num = uid(dre);

    //for (int num : a)
    //    print(std::cout, "{:8}", num);
    //std::cout << std::endl;

    // [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.
    // STL 배우기 전까진 이렇게 쓰면 잘한 것이지만, 이젠 이렇게 하면 안 됨
    // STL은 자료구조 제공

    // 이미 있는 걸 왜 for루프로 돌리는가? -> 바보코딩!
 
       // 이렇게 하거나
    //auto pos = std::max_element(std::begin(a), std::end(a));
    //std::cout <<"최댓값 : " << *pos << std::endl;      // 역참조
    
    // 이렇게 하기(더 짧게)
    std::cout << std::max_element(std::begin(a), std::end(a));

    // 내가 짜는 것보다 훨씬 optimizing 최적화된 코드! 
    // 이거보다 좋은 건 없을 것.

    save("STL.cpp");
}




==========================================================================
fileName ::, 2024-03-12 화요일 오후 2:57:04
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 12일 화요일    (2주 1)        
// 많은 수의 데이터를 처리할 수 있어야                                   
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <random>
#include <array>
#include <fstream>

std::default_random_engine dre;      //
std::uniform_int_distribution<int> uid{ 0, 9'9999 };
// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    std::array<int, 100> a;     // T[N] 대신 array<T,N>을 사용할 것 - STL 정식 자료 구조 include <array>

    for (int& num : a)
        num = uid(dre);

   // [문제] 파일 "int값들.txt"에 a의 int값을 모두 저장하라.
    std::ofstream out{ "int값들.txt" };       // RAII
    for (int num : a)
    {
        print(out, "{ :8 }num");
    }
    
    save("STL.cpp");
}

// 개 10만마리 파일 주고 ㅇㅇㅇ인 개가 몇 마리 있나? 그 코드는?


==========================================================================
fileName ::, 2024-03-12 화요일 오후 3:11:52
==========================================================================


//---------------------------------------------------------------------------------------------
// 2024. 1학기 STL 화56목56 3월 12일 화요일    (2주 1)        
// 많은 수의 데이터를 처리할 수 있어야                                   
//---------------------------------------------------------------------------------------------
#include "save.h"
#include <iostream>
#include <fstream>
#include <algorithm>

// [문제] "int값들.txt"에는 몇 개인지 모르는 int값이 있다.
// 제일 큰 값을 찾아 화면에 출력하라.
// 중간고사 0점 방지 문제로 낼 수 있음.
// 
//---------------------------------------------------------------------
int main()
//---------------------------------------------------------------------
{
    std::ifstream in{ "int값들.txt" };
    if (not in)
            exit(0);

    // 몇 개인지 세어보기
    int num;
    int cnt{};
    while (in >> num)
    {
        std::cout << "int개수 - " << cnt << std:: endl;
    }

    // STL 배우기 전까진 괜찮지만 이렇게 하지 않기
    // int maxValue = numeric_limits::

    // 이렇게 코딩하는 방법을 공부하는 과목임
    std::cout << *std::max_element(std::istream_iterator<int>(in), {}) << std::endl;
    

    save("STL.cpp");
}
